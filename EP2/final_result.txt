******************************
Code quality:
------------------------------
Code grade: 9.13/10.0	(Great code quality)
------------------------------
Standards deviation:
statement:	0
info:	0
convention:	18
refactor:	21
warning:	5
error:	1
fatal:	0
------------------------------
Deviation description:
line-too-long:	2
bad-whitespace:	3
too-many-lines:	1
consider-using-enumerate:	8
missing-docstring:	1
len-as-condition:	2
no-self-use:	2
too-many-instance-attributes:	1
too-many-locals:	3
no-else-return:	9
too-few-public-methods:	3
too-many-return-statements:	1
too-many-branches:	1
too-many-statements:	1
unused-variable:	4
no-member:	1
useless-super-delegation:	1
wrong-import-order:	1
******************************
Tests:
------------------------------
Part00: RandomAgent Improved
Test concluded without errors
Grade in the Test00: 8.0/10.0
------------------------------
Part01:
Test concluded without errors
Grade in the Test01: 7.5/10.0
------------------------------
Part02:
This autograder does not test Part02
because we need two instances of AlphaBetaAgent:
    -One using evaluation_function
    -One using my_better_evaluation_function
In order to test your implementation
you should run both instances against GetClosest
using different game grids, like the ones
presented in interesting_grids.txt.
The agent using my_better should be able to
get equal or higher score in most of the examples.